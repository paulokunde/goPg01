// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: fornecedor.sql

package modelo

import (
	"context"
)

const createFornecedor = `-- name: CreateFornecedor :one
insert into fornecedor(
    nome)
values(
    $1
)returning id, nome
`

func (q *Queries) CreateFornecedor(ctx context.Context, nome string) (Fornecedor, error) {
	row := q.queryRow(ctx, q.createFornecedorStmt, createFornecedor, nome)
	var i Fornecedor
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}

const deleteFornecedor = `-- name: DeleteFornecedor :exec
delete from fornecedor
where id = $1
`

func (q *Queries) DeleteFornecedor(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteFornecedorStmt, deleteFornecedor, id)
	return err
}

const findFornecedorByName = `-- name: FindFornecedorByName :many
select id, nome from fornecedor
where nome like $1
`

func (q *Queries) FindFornecedorByName(ctx context.Context, nome string) ([]Fornecedor, error) {
	rows, err := q.query(ctx, q.findFornecedorByNameStmt, findFornecedorByName, nome)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fornecedor{}
	for rows.Next() {
		var i Fornecedor
		if err := rows.Scan(&i.ID, &i.Nome); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFornecedorById = `-- name: GetFornecedorById :one
select id, nome from fornecedor
where id = $1 limit 1
`

func (q *Queries) GetFornecedorById(ctx context.Context, id int32) (Fornecedor, error) {
	row := q.queryRow(ctx, q.getFornecedorByIdStmt, getFornecedorById, id)
	var i Fornecedor
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}

const getFornecedorByName = `-- name: GetFornecedorByName :one
select id, nome from fornecedor
where nome = $1 limit 1
`

func (q *Queries) GetFornecedorByName(ctx context.Context, nome string) (Fornecedor, error) {
	row := q.queryRow(ctx, q.getFornecedorByNameStmt, getFornecedorByName, nome)
	var i Fornecedor
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}

const listFornecedores = `-- name: ListFornecedores :many
select id, nome from fornecedor
order by nome
`

func (q *Queries) ListFornecedores(ctx context.Context) ([]Fornecedor, error) {
	rows, err := q.query(ctx, q.listFornecedoresStmt, listFornecedores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fornecedor{}
	for rows.Next() {
		var i Fornecedor
		if err := rows.Scan(&i.ID, &i.Nome); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFornecedor = `-- name: UpdateFornecedor :one
update fornecedor
set nome = $2
where id = $1 returning id, nome
`

type UpdateFornecedorParams struct {
	ID   int32  `json:"id"`
	Nome string `json:"nome"`
}

func (q *Queries) UpdateFornecedor(ctx context.Context, arg UpdateFornecedorParams) (Fornecedor, error) {
	row := q.queryRow(ctx, q.updateFornecedorStmt, updateFornecedor, arg.ID, arg.Nome)
	var i Fornecedor
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}
