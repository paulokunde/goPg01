// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: modelo.sql

package modelo

import (
	"context"
)

const createModelo = `-- name: CreateModelo :one
insert into modelo(
    nome,marca_id)
values(
    $1,$2
)returning id, nome, marca_id
`

type CreateModeloParams struct {
	Nome    string `json:"nome"`
	MarcaID int32  `json:"marca_id"`
}

func (q *Queries) CreateModelo(ctx context.Context, arg CreateModeloParams) (Modelo, error) {
	row := q.queryRow(ctx, q.createModeloStmt, createModelo, arg.Nome, arg.MarcaID)
	var i Modelo
	err := row.Scan(&i.ID, &i.Nome, &i.MarcaID)
	return i, err
}

const deleteModelo = `-- name: DeleteModelo :exec
delete from modelo
where id = $1
`

func (q *Queries) DeleteModelo(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteModeloStmt, deleteModelo, id)
	return err
}

const findMarcasByName = `-- name: FindMarcasByName :many
select id, nome from marca
where nome like $1
`

func (q *Queries) FindMarcasByName(ctx context.Context, nome string) ([]Marca, error) {
	rows, err := q.query(ctx, q.findMarcasByNameStmt, findMarcasByName, nome)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Marca{}
	for rows.Next() {
		var i Marca
		if err := rows.Scan(&i.ID, &i.Nome); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findModelosByMarca = `-- name: FindModelosByMarca :many
select id, nome, marca_id from modelo
where marca_id = $1
limit $2 offset $3
`

type FindModelosByMarcaParams struct {
	MarcaID int32 `json:"marca_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) FindModelosByMarca(ctx context.Context, arg FindModelosByMarcaParams) ([]Modelo, error) {
	rows, err := q.query(ctx, q.findModelosByMarcaStmt, findModelosByMarca, arg.MarcaID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Modelo{}
	for rows.Next() {
		var i Modelo
		if err := rows.Scan(&i.ID, &i.Nome, &i.MarcaID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findModelosByName = `-- name: FindModelosByName :many
select id, nome, marca_id from modelo
where nome like $1
limit $2 offset $3
`

type FindModelosByNameParams struct {
	Nome   string `json:"nome"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) FindModelosByName(ctx context.Context, arg FindModelosByNameParams) ([]Modelo, error) {
	rows, err := q.query(ctx, q.findModelosByNameStmt, findModelosByName, arg.Nome, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Modelo{}
	for rows.Next() {
		var i Modelo
		if err := rows.Scan(&i.ID, &i.Nome, &i.MarcaID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getModeloById = `-- name: GetModeloById :one
select id, nome, marca_id from modelo
where id = $1 limit 1
`

func (q *Queries) GetModeloById(ctx context.Context, id int32) (Modelo, error) {
	row := q.queryRow(ctx, q.getModeloByIdStmt, getModeloById, id)
	var i Modelo
	err := row.Scan(&i.ID, &i.Nome, &i.MarcaID)
	return i, err
}

const getModeloByName = `-- name: GetModeloByName :one
select id, nome, marca_id from modelo
where nome = $1 limit 1
`

func (q *Queries) GetModeloByName(ctx context.Context, nome string) (Modelo, error) {
	row := q.queryRow(ctx, q.getModeloByNameStmt, getModeloByName, nome)
	var i Modelo
	err := row.Scan(&i.ID, &i.Nome, &i.MarcaID)
	return i, err
}

const listModelos = `-- name: ListModelos :many
select id, nome, marca_id from modelo
order by nome
`

func (q *Queries) ListModelos(ctx context.Context) ([]Modelo, error) {
	rows, err := q.query(ctx, q.listModelosStmt, listModelos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Modelo{}
	for rows.Next() {
		var i Modelo
		if err := rows.Scan(&i.ID, &i.Nome, &i.MarcaID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateModelo = `-- name: UpdateModelo :one
update modelo 
set nome = $2,marca_id = $3
where id = $1 returning id, nome, marca_id
`

type UpdateModeloParams struct {
	ID      int32  `json:"id"`
	Nome    string `json:"nome"`
	MarcaID int32  `json:"marca_id"`
}

func (q *Queries) UpdateModelo(ctx context.Context, arg UpdateModeloParams) (Modelo, error) {
	row := q.queryRow(ctx, q.updateModeloStmt, updateModelo, arg.ID, arg.Nome, arg.MarcaID)
	var i Modelo
	err := row.Scan(&i.ID, &i.Nome, &i.MarcaID)
	return i, err
}
