// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: marca.sql

package modelo

import (
	"context"
)

const createMarca = `-- name: CreateMarca :one
insert into marca(
    nome)
values(
    $1
)returning id, nome
`

func (q *Queries) CreateMarca(ctx context.Context, nome string) (Marca, error) {
	row := q.queryRow(ctx, q.createMarcaStmt, createMarca, nome)
	var i Marca
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}

const deleteMarca = `-- name: DeleteMarca :exec
delete from marca
where id = $1
`

func (q *Queries) DeleteMarca(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteMarcaStmt, deleteMarca, id)
	return err
}

const findMarcaByName = `-- name: FindMarcaByName :many
select id, nome from marca
where nome like $1
limit $2 offset $3
`

type FindMarcaByNameParams struct {
	Nome   string `json:"nome"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) FindMarcaByName(ctx context.Context, arg FindMarcaByNameParams) ([]Marca, error) {
	rows, err := q.query(ctx, q.findMarcaByNameStmt, findMarcaByName, arg.Nome, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Marca{}
	for rows.Next() {
		var i Marca
		if err := rows.Scan(&i.ID, &i.Nome); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMarcaById = `-- name: GetMarcaById :one
select id, nome from marca
where id = $1 limit 1
`

func (q *Queries) GetMarcaById(ctx context.Context, id int32) (Marca, error) {
	row := q.queryRow(ctx, q.getMarcaByIdStmt, getMarcaById, id)
	var i Marca
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}

const getMarcaByName = `-- name: GetMarcaByName :one
select id, nome from marca
where nome = $1 limit 1
`

func (q *Queries) GetMarcaByName(ctx context.Context, nome string) (Marca, error) {
	row := q.queryRow(ctx, q.getMarcaByNameStmt, getMarcaByName, nome)
	var i Marca
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}

const listMarcas = `-- name: ListMarcas :many
select id, nome from marca
order by nome
`

func (q *Queries) ListMarcas(ctx context.Context) ([]Marca, error) {
	rows, err := q.query(ctx, q.listMarcasStmt, listMarcas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Marca{}
	for rows.Next() {
		var i Marca
		if err := rows.Scan(&i.ID, &i.Nome); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMarca = `-- name: UpdateMarca :one
update marca 
set nome = $2
where id = $1 returning id, nome
`

type UpdateMarcaParams struct {
	ID   int32  `json:"id"`
	Nome string `json:"nome"`
}

func (q *Queries) UpdateMarca(ctx context.Context, arg UpdateMarcaParams) (Marca, error) {
	row := q.queryRow(ctx, q.updateMarcaStmt, updateMarca, arg.ID, arg.Nome)
	var i Marca
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}
