// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: marca.sql

package database

import (
	"context"
)

const createMarca = `-- name: CreateMarca :execlastid
insert into infra.marca(
    username,nome)
values(
    $1, $2
)
`

func (q *Queries) CreateMarca(ctx context.Context) (int64, error) {
	result, err := q.exec(ctx, q.createMarcaStmt, createMarca)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteMarca = `-- name: DeleteMarca :exec
delete from infra.marca
where id = $1
`

func (q *Queries) DeleteMarca(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteMarcaStmt, deleteMarca)
	return err
}

const findMarcaByName = `-- name: FindMarcaByName :many
select username, create_time, id, nome from infra.marca
where nome like $1
`

func (q *Queries) FindMarcaByName(ctx context.Context) ([]InfraMarca, error) {
	rows, err := q.query(ctx, q.findMarcaByNameStmt, findMarcaByName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InfraMarca{}
	for rows.Next() {
		var i InfraMarca
		if err := rows.Scan(
			&i.Username,
			&i.CreateTime,
			&i.ID,
			&i.Nome,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMarcaById = `-- name: GetMarcaById :one
select username, create_time, id, nome from infra.marca
where id = $1 limit 1
`

func (q *Queries) GetMarcaById(ctx context.Context) (InfraMarca, error) {
	row := q.queryRow(ctx, q.getMarcaByIdStmt, getMarcaById)
	var i InfraMarca
	err := row.Scan(
		&i.Username,
		&i.CreateTime,
		&i.ID,
		&i.Nome,
	)
	return i, err
}

const getMarcaByName = `-- name: GetMarcaByName :one
select username, create_time, id, nome from infra.marca
where nome = $1 limit 1
`

func (q *Queries) GetMarcaByName(ctx context.Context) (InfraMarca, error) {
	row := q.queryRow(ctx, q.getMarcaByNameStmt, getMarcaByName)
	var i InfraMarca
	err := row.Scan(
		&i.Username,
		&i.CreateTime,
		&i.ID,
		&i.Nome,
	)
	return i, err
}

const listMarcas = `-- name: ListMarcas :many
select username, create_time, id, nome from infra.marca
order by nome
`

func (q *Queries) ListMarcas(ctx context.Context) ([]InfraMarca, error) {
	rows, err := q.query(ctx, q.listMarcasStmt, listMarcas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InfraMarca{}
	for rows.Next() {
		var i InfraMarca
		if err := rows.Scan(
			&i.Username,
			&i.CreateTime,
			&i.ID,
			&i.Nome,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMarca = `-- name: UpdateMarca :exec
update infra.marca 
set nome = $2, usuario = $3
where id = $1
`

func (q *Queries) UpdateMarca(ctx context.Context) error {
	_, err := q.exec(ctx, q.updateMarcaStmt, updateMarca)
	return err
}
