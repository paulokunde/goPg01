// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createMarcaStmt, err = db.PrepareContext(ctx, createMarca); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMarca: %w", err)
	}
	if q.deleteMarcaStmt, err = db.PrepareContext(ctx, deleteMarca); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMarca: %w", err)
	}
	if q.findMarcaByNameStmt, err = db.PrepareContext(ctx, findMarcaByName); err != nil {
		return nil, fmt.Errorf("error preparing query FindMarcaByName: %w", err)
	}
	if q.getMarcaByIdStmt, err = db.PrepareContext(ctx, getMarcaById); err != nil {
		return nil, fmt.Errorf("error preparing query GetMarcaById: %w", err)
	}
	if q.getMarcaByNameStmt, err = db.PrepareContext(ctx, getMarcaByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetMarcaByName: %w", err)
	}
	if q.listMarcasStmt, err = db.PrepareContext(ctx, listMarcas); err != nil {
		return nil, fmt.Errorf("error preparing query ListMarcas: %w", err)
	}
	if q.updateMarcaStmt, err = db.PrepareContext(ctx, updateMarca); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMarca: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createMarcaStmt != nil {
		if cerr := q.createMarcaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMarcaStmt: %w", cerr)
		}
	}
	if q.deleteMarcaStmt != nil {
		if cerr := q.deleteMarcaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMarcaStmt: %w", cerr)
		}
	}
	if q.findMarcaByNameStmt != nil {
		if cerr := q.findMarcaByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findMarcaByNameStmt: %w", cerr)
		}
	}
	if q.getMarcaByIdStmt != nil {
		if cerr := q.getMarcaByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMarcaByIdStmt: %w", cerr)
		}
	}
	if q.getMarcaByNameStmt != nil {
		if cerr := q.getMarcaByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMarcaByNameStmt: %w", cerr)
		}
	}
	if q.listMarcasStmt != nil {
		if cerr := q.listMarcasStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMarcasStmt: %w", cerr)
		}
	}
	if q.updateMarcaStmt != nil {
		if cerr := q.updateMarcaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMarcaStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	createMarcaStmt     *sql.Stmt
	deleteMarcaStmt     *sql.Stmt
	findMarcaByNameStmt *sql.Stmt
	getMarcaByIdStmt    *sql.Stmt
	getMarcaByNameStmt  *sql.Stmt
	listMarcasStmt      *sql.Stmt
	updateMarcaStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		createMarcaStmt:     q.createMarcaStmt,
		deleteMarcaStmt:     q.deleteMarcaStmt,
		findMarcaByNameStmt: q.findMarcaByNameStmt,
		getMarcaByIdStmt:    q.getMarcaByIdStmt,
		getMarcaByNameStmt:  q.getMarcaByNameStmt,
		listMarcasStmt:      q.listMarcasStmt,
		updateMarcaStmt:     q.updateMarcaStmt,
	}
}
